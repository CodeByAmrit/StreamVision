<section class="p-4 sm:ml-64 dark:bg-gray-900 dark:text-white">
  <div class="w-full h-full mt-16">
    <!-- DVR Header -->
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-2xl font-semibold">Location: <%= dvr.location_name %></h2>
      <a
        href="/camera/add/<%= dvr.id %>"
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
      >
        + Add Camera
      </a>
    </div>

    <!-- Camera Cards Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      <% dvr.cameras.forEach((camera, index) => { %>
      <div
        class="max-w-sm bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700 overflow-hidden"
      >
        <!-- Spinner -->
        <div
          id="spinner<%= index + 1 %>"
          class="flex justify-center items-center h-48 bg-black"
        >
          <svg class="animate-spin h-6 w-6 text-white" viewBox="0 0 24 24">
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="white"
              stroke-width="4"
              fill="none"
            />
            <path class="opacity-75" fill="white" d="M4 12a8 8 0 018-8v8z" />
          </svg>
        </div>

        <!-- Video Player -->
        <video
          id="video<%= index + 1 %>"
          class="w-full h-48 object-cover bg-black hidden"
          controls
          muted
          autoplay
          playsinline
          preload="none"
        ></video>

        <!-- Card Content -->
        <div class="p-5">
          <h5
            class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white"
          >
            <%= camera.camera_name %>
          </h5>
          <p
            class="mb-3 font-normal text-sm text-gray-700 dark:text-gray-400 break-words"
          >
            <!-- <span class="font-semibold">RTSP:</span> <%= camera.rtsp_url %> -->
          </p>
          <div class="flex justify-between space-x-2">
            <a
              href="/camera/edit/<%= camera.id %>"
              class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700"
            >
              Edit
            </a>
            <a
              href="/camera/delete/<%= camera.id %>"
              class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700"
            >
              Delete
            </a>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
  </div>
</section>

<!-- Add HLS.js -->
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<script nonce="<%= nonce %>">
  const cameras = <%- JSON.stringify(dvr.cameras) %>;
  const dvrId = <%= dvr.id %>;

  fetch(`/public/dvr/${dvrId}`);

  function tryLoadStream(camera, index, retries = 5, delay = 2000) {
    const video = document.getElementById(`video${index + 1}`);
    const spinner = document.getElementById(`spinner${index + 1}`);
    const source = `/streams/dvr_${dvrId}/cam_${camera.id}/index.m3u8`;

    fetch(source).then(response => {
      if (response.ok) {
        if (Hls.isSupported()) {
          const hls = new Hls();
          hls.loadSource(source);
          hls.attachMedia(video);
          hls.on(Hls.Events.MANIFEST_PARSED, () => {
            spinner.classList.add('hidden');
            video.classList.remove('hidden');
          });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
          video.src = source;
          video.addEventListener('loadedmetadata', () => {
            spinner.classList.add('hidden');
            video.classList.remove('hidden');
          });
        }
      } else if (retries > 0) {
        fetch(`/public/dvr/${dvrId}`);
        console.warn(`Retrying cam ${camera.id} in ${delay / 1000}s`);
        setTimeout(() => tryLoadStream(camera, index, retries - 1, delay * 2), delay);
      } else {
        spinner.innerHTML = `<p class="text-red-500 text-center">Stream not available for cam ${camera.id}</p>`;
      }
    }).catch(err => {
      console.error(`Error for cam ${camera.id}:`, err);
      spinner.innerHTML = `<p class="text-red-500 text-center">Error loading cam ${camera.id}</p>`;
    });
  }

  function loadAllStreams() {
    cameras.forEach((camera, index) => {
      tryLoadStream(camera, index);
    });
  }

  setTimeout(() => {
    loadAllStreams();
  }, 1000);

  setInterval(() => {
    console.log("Refreshing streams...");
    loadAllStreams();
  }, 1000 * 60 * 5);
</script>
